#服务名、端口配置
server:
  port: 5004
  servlet:
    context-path: /sct-account

#数据库连接配置
spring:
  profiles:
    active: sit #运行环境
  application:
    name: sct-account
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
  datasource:
    username: ${sct.db.username}
    password: ${sct.db.password}
    url: jdbc:mysql://${sct.db.address}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Hongkong&usessl=true&useOldAliasMetadataBehavior=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid: #如果使用 druid-springboot-starter 可在配置文件直接配置druid相关属性
      initial-size: 1 #初始化连接大小
      max-active: 10 #最大连接数
      min-idle: 1   #最小空闲连接数
      max-wait: 60000 #配置获取连接等待超时的时间(毫秒)
      pool-prepared-statements: false #是否缓存PreparedStatement. PSCache对支持游标的数据库性能提升巨大，比如说oracle.在mysql下建议关闭.
      max-pool-prepared-statement-per-connection-size: 20 #每个连接上PSCache的大小
      validation-query: SELECT 'x' #用来检测连接是否有效的sql
      validation-query-timeout: 10 #指定连接校验查询的超时时间
      test-on-borrow: true #当从连接池借用连接时，是否测试该连接
      test-on-return: false #在连接归还到连接池时是否测试该连接
      test-while-idle: false #当连接空闲时，是否执行连接测试
  jpa:
    database: MySQL
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    show-sql: true
    hibernate:
      # create：每次运行程序时，都会重新创建表，故而数据会丢失
      # create-drop：每次运行程序时会先创建表结构，然后待程序结束时清空表
      # upadte：每次运行程序，没有表时会创建表，如果对象发生改变会更新表结构，原有数据不会清空，只会更新（推荐使用）
      # validate：运行程序会校验数据与数据库的字段类型是否相同，字段不同会报错
      # none: 禁用DDL处理
      ddl-auto: none
  redis:
    host: ${sct.redis.host}
    port: ${sct.redis.port}
    password: ${sct.redis.password}
    database: 0  #操作第几个库
    jedis:
      pool:
        max-active: 10 #最大连接数
        max-wait: 6000ms #等待时间
        max-idle: 8 #最大空闲数
        min-idle: 3 #初始化最小数

#是否开启熔断器
feign:
  hystrix:
    enabled: true

hystrix:
  command:
    default:
      execution:
        timeout:
          #如果enabled设置为false，则请求超时交给ribbon控制,为true,则超时作为熔断根据
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 150000 #断路器超时时间，默认1000ms
#          strategy: THREAD
          strategy: SEMAPHORE

#如何配置好Hystrix和Ribbon的超时时间呢？
#Feign的请求：其实是Hystrix+Ribbon。Hystrix在最外层，然后再到Ribbon，最后里面的是http请求。
#所以说。Hystrix的熔断时间必须大于Ribbon的 ( ConnectTimeout + ReadTimeout )。
#而如果Ribbon开启了重试机制，还需要乘以对应的重试次数，保证在Ribbon里的请求还没结束时，Hystrix的熔断时间不会超时。
#配置ribbon 负载策略
ribbon:
  ConnectTimeout: 5000 #请求连接超时时间(ms)
  ReadTimeout: 5000 #请求处理的超时时间(ms)
  OkToRetryOnAllOperations: false #true:对所有请求(包括GET)都进行重试
  MaxAutoRetriesNextServer: 0 # 切换实例的重试次数
  MaxAutoRetries: 0 # 对当前实例的重试次数
  #请求次数 = MaxAutoRetries + MaxAutoRetriesNextServer + (MaxAutoRetries * MaxAutoRetiresNextServer) + 1

#eureka:
#  client:
#    service-url:
#      defaultZone: http://localhost:8000/eureka #注册地址

#日志
logging:
  level:
    root: info
    org.hibernate.type.descriptor.sql.BasicBinder: trace

sct:
  db:
    adress: localhost/dbname
    username: admin
    password: admin123
  redis:
    host: localhost
    port: 8089
    password: admin123

#====================================Seata Config===============================================

seata:
  enabled: true
  application-id: sct-account-seata
  tx-service-group: sct_tx_group # 事务群组（可以每个应用独立取名，也可以使用相同的名字）
  client:
    rm-report-success-enable: true
    rm-table-meta-check-enable: false # 自动刷新缓存中的表结构（默认false）
    rm-report-retry-count: 5 # 一阶段结果上报TC重试次数（默认5）
    rm-async-commit-buffer-limit: 10000 # 异步提交缓存队列长度（默认10000）
    rm:
      lock:
        lock-retry-internal: 10 # 校验或占用全局锁重试间隔（默认10ms）
        lock-retry-times:    30 # 校验或占用全局锁重试次数（默认30）
        lock-retry-policy-branch-rollback-on-conflict: true # 分支事务与其它全局回滚事务冲突时锁策略（优先释放本地锁让回滚成功）
    tm-commit-retry-count:   3 # 一阶段全局提交结果上报TC重试次数（默认1次，建议大于1）
    tm-rollback-retry-count: 3 # 一阶段全局回滚结果上报TC重试次数（默认1次，建议大于1）
    undo:
      undo-data-validation: true # 二阶段回滚镜像校验（默认true开启）
      undo-log-serialization: jackson # undo序列化方式（默认jackson）
      undo-log-table: undo_log  # 自定义undo表名（默认undo_log）
    support:
      spring:
        datasource-autoproxy: true
  service:
    vgroup-mapping:
      sct_tx_group: default # TC 集群（必须与seata-server保持一致）
    enable-degrade: false # 降级开关
    disable-global-transaction: false # 禁用全局事务（默认false）
    grouplist:
      default: 127.0.0.1:8091
  transport:
    shutdown:
      wait: 3
    thread-factory:
      boss-thread-prefix: NettyBoss
      worker-thread-prefix: NettyServerNIOWorker
      server-executor-thread-prefix: NettyServerBizHandler
      share-boss-worker: false
      client-selector-thread-prefix: NettyClientSelector
      client-selector-thread-size: 1
      client-worker-thread-prefix: NettyClientWorkerThread
    type: TCP
    server: NIO
    heartbeat: true
    serialization: seata
    compressor: none
    enable-client-batch-send-request: true # 客户端事务消息请求是否批量合并发送（默认true）
  registry:
    file:
      name: file.conf
    type: nacos
    nacos:
      server-addr: 127.0.0.1:8848
      namespace:
      cluster: default
      username: ""
      password: ""
      group: scart_sit_group
  config:
    file:
      name: file.conf
    type: file
  #    nacos:
  #      namespace: fb31c4c2-29ac-456c-b9d6-36301baceae4
  #      server-addr: 127.0.0.1:8848
  #      username: "nacos"
  #      password: "nacos"
  log:
    exception-rate: 100